--misc
function sprmakr()
	local myspr={}
	myspr.x=0
	myspr.y=0
	myspr.dx=0
	myspr.dy=0
	myspr.aniframe=1
	myspr.flash=0
	myspr.preatk=0
	myspr.spr=0
	myspr.sprw=1
	myspr.sprh=1
	myspr.colw=8
	myspr.colh=8
	myspr.timr=0
	return myspr
end

function lifedrops()
	--life up every 2 minutes
	local dropt=flr(t)%7200
	if dropt==0 then
		local ex_life=sprmakr()
		ex_life.spr=193
		ex_life.anispd=0.5
		ex_life.ani={193,194,195}
		ex_life.x=rnd(120)+4
		ex_life.y=1
		ex_life.colw=8
		ex_life.colh=5
		add(one_ups,ex_life)
	end
	for ex_life in all(one_ups) do
		ex_life.aniframe+=ex_life.anispd
  if flr(ex_life.aniframe)>#ex_life.ani then
   ex_life.aniframe=1
  end
  ex_life.spr=ex_life.ani[flr(ex_life.aniframe)]
	
		ex_life.y+=0.25
		if ex_life.y>130 then
			del(one_ups,ex_life)
		end
	end
end

function en_shot(myen,ang,spd)
	local new_ebul=sprmakr()
	new_ebul.spr=12
	new_ebul.anispd=0.3
	new_ebul.ani={12,13,14}
	new_ebul.colw=4
	new_ebul.colh=4
	if myen.type==5
	or myen.type==6 then
		new_ebul.x=myen.x+6
		new_ebul.y=myen.y+2
	elseif myen.type==7 then
		new_ebul.x=myen.x+15
		new_ebul.y=myen.y+8
	else
		new_ebul.x=myen.x+2
		new_ebul.y=myen.y
	end

	new_ebul.dx=sin(ang)*spd
	new_ebul.dy=cos(ang)*spd
	add(ebuls,new_ebul)
	sfx(1)
end

function en_spred(myen,mod,spd)
	for i=1,8 do
		en_shot(myen,i/8+mod,spd)
	end
end

function aimfire(myen,spd)
	ang=atan2(ship.y-myen.y,
		ship.x-myen.x)
	en_shot(myen,ang,spd)
end

function gen_h_line()
	local my_h_line={}
	my_h_line.y=0
	add(horiz_line,my_h_line)
end

function gen_v_line_l()
	local my_v_line={}
	my_v_line.x=0
	add(vert_line,my_v_line)
end

function gen_v_line_r()
	local my_v_line={}
	my_v_line.x=128
	add(vert_line,my_v_line)
end

function gen_sstar()
	local sstar={}
	sstar.x=rnd(128)
	sstar.y=-8
	sstar.spd=rnd(1.5)
	add(slowstars,sstar)
end

function gen_fstar()
	local fstar={}
	fstar.x=rnd(128)
	fstar.y=-8
	fstar.spd=rnd(2)+1
	add(faststars,fstar)
end

function col(a,b)
	--"a" boundaries
	local a_left=a.x
	local a_top=a.y
	local a_right=a.x+a.colw-1
	local a_bot=a.y+a.colh-1
	--"b" boundaries
	local b_left=b.x
	local b_top=b.y
	local b_right=b.x+b.colw-1
	local b_bot=b.y+b.colh-1
	--col dtxn
	if a_top>b_bot then
		return false
	end
	if b_top>a_bot then
		return false
	end
	if a_left>b_right then
		return false
	end
	if b_left>a_right then
		return false
	end
	return true
end

function lotsa_cols()
	--player cols
	--col dtxn ship x ball
	if col(ship,ball) then
		if ball.dy>0 then
			ball.dy=-1
			sfx(44)
		end
	end
	if not invul then
	--col dtxn ship x enemies
		for myen in all(enemies) do
			if col(myen,ship) then
				respawn()
			end
		end
	--col dtxn ship x ebuls
		for myebul in all(ebuls) do
			if col(myebul,ship) then
				respawn()
			end
		end
	--col dtxn ship x brix
		for mybrix in all(brix) do
			if col(mybrix,ship) then
				respawn()
			end
		end
	end
	--col dtxn ship x 1up
	for ex_life in all(one_ups) do
		if col(ex_life,ship) then
			del(one_ups,ex_life)
			lives+=1
			sfx(13)
		end
	end

	--enemy cols
	for myen in all(enemies) do
		if myen.timr>=0 then
			myen.timr-=1
		end
	--col dtxn enemies x ball
		if col(myen,ball)
		and canshot
		and not sticky then
			--enemy flash on hit
			myen.flash=3
			--prevent enemies from
			--being hit every frame
			--by the ball
			if myen.timr<=0 then
				myen.hp-=3
				myen.timr=5
				sfx(6)
			end
			if myen.hp>0 then
				--shockwave only if
				--enemy survives
				shockwav(myen.x,myen.y,
				myen.sprw,myen.sprh)

				if deflect_ball(
				ball.x,ball.y,ball.dx,ball.dy,
				myen.x,myen.y,myen.dx,myen.dy
				) then
					ball.dx=-ball.dx
				else
					ball.dy=-ball.dy
				end
			elseif myen.hp<=0 then
				if myen.type==5
				or myen.type==6 then
					explode(myen.x+4,myen.y+4,false)
					points+=100
					tot_points+=100
				elseif myen.type==7 then
					explode(myen.x+12,myen.y+12,false)
					points+=1000
					tot_points+=1000
				elseif myen.type==4 then
					explode(myen.x,myen.y,false)
					points+=50
					tot_points+=50
				else
					explode(myen.x,myen.y,false)
					points+=10
					tot_points+=10
				end
				del(enemies,myen)
				sfx(5)
			end
		end
	--col dtxn enemies x buls
		for mybul in all(buls) do
			if col(myen,mybul) then
				--only dmg if wave
				--is set up
				if canshot then
					shrapnel(myen.x,myen.y,false)
					myen.hp-=1
					myen.flash=3
					sfx(4)
				end
				--enemy die if hp<=0
				if myen.hp<=0 then
					if myen.type==5
					or myen.type==6 then
						explode(myen.x+4,myen.y+4,false)
						points+=100
						tot_points+=100
					elseif myen.type==7 then
						explode(myen.x+12,myen.y+12,false)
						points+=1000
						tot_points+=1000
					elseif myen.type==4 then
						explode(myen.x,myen.y,false)
						points+=50
						tot_points+=50
					else
						explode(myen.x,myen.y,false)
						points+=10
						tot_points+=10
					end
					del(enemies,myen)
					sfx(5)
				end
				del(buls,mybul)
			end
		end
	end

	--col dtxn buls x ball
	for mybul in all(buls) do
		if col(mybul,ball)
		and not sticky then
			shrapnel(ball.x,ball.y,true)
			ball.dy=-1
			del(buls,mybul)
			sfx(3)
		end
	end
	
	--brix cols
	for mybrix in all(brix) do
	--col dtxn buls x brix
		for mybul in all(buls) do
			if col(mybul,mybrix) then
				if canshot then
					mybrix.hp-=1
					mybrix.flash=3
				end
				if mybrix.hp<=0 then
					points+=10
					tot_points+=10
					del(brix,mybrix)
				end
				sfx(12)
				shrapnel(mybrix.x,mybrix.y,false)
				del(buls,mybul)
			end
		end

	--col dtxn ball x brix
	if col(ball,mybrix)
		and mode=="game"
		and not sticky then
			if deflect_ball(
			ball.x,ball.y,ball.dx,ball.dy,
			mybrix.x,mybrix.y,mybrix.dx,mybrix.dy
			) then
				ball.dx=-ball.dx
			else
				ball.dy=-ball.dy
			end
			sfx(11)
			points+=10
			tot_points+=10
			shrapnel(mybrix.x,mybrix.y,false)
			del(brix,mybrix)
		end
	end
end

function deflect_ball(bx,by,bdx,bdy,tx,ty,tw,th)
-- calculate wether to deflect the ball
-- horizontally or vertically when it hits a box
 	if bdx == 0 then
  	-- moving vertically
		return false
	elseif bdy == 0 then
	-- moving horizontally
  		return true
	else
 		-- moving diagonally
		-- calculate slope
		local slp = bdy / bdx
 		local cx, cy
		-- check variants
  		if slp > 0 and bdx > 0 then
 			-- moving down right
 			debug1="q1"
			cx = tx-bx
			cy = ty-by
 			if cx<=0 then
				return false
			elseif cy/cx < slp then
				return true
			else
				return false
			end
		elseif slp < 0 and bdx > 0 then
			debug1="q2"
			-- moving up right
			cx = tx-bx
			cy = ty+th-by
			if cx<=0 then
				return false
			elseif cy/cx < slp then
				return false
			else
				return true
			end
		elseif slp > 0 and bdx < 0 then
			debug1="q3"
			-- moving left up
			cx = tx+tw-bx
			cy = ty+th-by
			if cx>=0 then
				return false
			elseif cy/cx > slp then
				return false
			else
				return true
			end
		else
			-- moving left down
			debug1="q4"
			cx = tx+tw-bx
			cy = ty-by
			if cx>=0 then
				return false
			elseif cy/cx < slp then
				return false
			else
				return true
			end
		end
	end
	return false
end

function explode(expx,expy,isblue)
	for i=1,30 do
		local myp={}
		myp.x=expx
		myp.y=expy
		myp.blue=isblue
		myp.dx=(rnd()-0.5)*2
		myp.dy=(rnd()-0.5)*2
		myp.age=rnd(2)
		myp.size=1+rnd(3)
		myp.maxage=20+rnd(30)
		add(parts,myp)
	end
end

function shrapnel(bitx,bity,isgrn)
	for i=1,rnd(3)+2 do
		local mysprx={}
		mysprx.x=bitx
		mysprx.y=bity
		mysprx.grn=isgrn
		mysprx.dx=(rnd()-0.5)*2
		mysprx.dy=(rnd()-0.5)*2
		mysprx.age=rnd(2)
		mysprx.size=1
		mysprx.maxage=15+rnd(15)
		add(sprx,mysprx)
	end
end

function shockwav(wavx,wavy,wavw,wavh)
	local mysw={}
	mysw.x=wavx
	mysw.y=wavy
	mysw.wavw=wavw
	mysw.wavh=wavh
	if mysw.wavw==4 then
		mysw.r=5
		mysw.maxr=19
	elseif mysw.wavw==2 then
		mysw.r=4
		mysw.maxr=16
	else
		mysw.r=2
		mysw.maxr=10
	end
	add(shkwav,mysw)
end