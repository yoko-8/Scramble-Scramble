--scramble, scramble!! v1.4
--by yoko8 / @fox_in_mask

--core fxns
function _init()
	cls()
	start_t=0
	music(0)

	--ship anim for intro screen
	animship={}
 	local introship=sprmakr()
	introship.spr=240
	introship.x=104
	introship.y=94
	introship.sprw=2
	introship.sprh=1
	introship.ani={240,242,244,246,248,250,252}
	introship.anispd=0.05
	add(animship,introship)

	--ball anim for intro screen
	animball={}
	local introball=sprmakr()
	introball.spr=215
	introball.x=60
	introball.y=50
	introball.colw=11
	introball.colh=11
	introball.sprw=2
	introball.sprh=2
	anim1=true
	anim2=false
	anim3=false
	anim4=false
	anim5=false
	anim6=false
	add(animball,introball)
	--buls anim for intro screen
	animbuls={}
	local introbuls=sprmakr()
	introbuls.spr=192
	introbuls.x=106
	introbuls.y=94
	introbuls.colw=8
	introbuls.colh=8
	introbuls.sprw=1
	introbuls.sprh=1
	bullanim=false
	add(animbuls,introbuls)
	
	--sprx anim for intro screen
	animsprx={}
	
	--lines anim for intro screen
	horiz_line={}
	for i=1,7 do
		local my_h_line=sprmakr()
		my_h_line.y=i*18.3-20
		add(horiz_line,my_h_line)
	end
	vert_line={}
	for i=1,5 do
		local my_v_line=sprmakr()
		my_v_line.x=i*25.6-20
		add(vert_line,my_v_line)
	end

	--switch mode	
	mode="start"
end

function _update60()
	if mode=="start" then
 	start_t+=1
		update_start()
	elseif mode=="wavstrt" then
		update_wavstrt()
	elseif mode=="game" then
		update_game()
	elseif mode=="gameover" then
		update_gameover()
	elseif mode=="gamewin" then
		update_gamewin()
	end
end

function _draw()
	if mode=="start" then
		draw_start()
	elseif mode=="wavstrt" then
		draw_wavstrt()
	elseif mode=="game" then
		draw_game()
	elseif mode=="gameover" then
		draw_gameover()
	elseif mode=="gamewin" then
		draw_gamewin()
	end
end

--game loop

function update_start()
 if btn(2) and btn(5) then
 	startgame()
 end
end

function startgame()
	mode="wavstrt"
	sticky=true
	shot=false
	lives=3
	lifelost=false
	invul=false
	t=0
	points=0
	tot_points=0
	retries=0
	wave=1
	wavt=150
	canshot=false
	one_ups={}
	
	--ship var
	ship=sprmakr()
	ship.spr=1
	ship.x=59
	ship.y=105
	ship.dx=0
	ship.dy=0
	invul=false
	respawning=false
	jet=sprmakr()
	jet.spr=4
	jet.spd=0.3
	jet.x=59
	jet.y=113
	jet.sprw=1
	jet.sprh=1
	
	--ball var
	ball=sprmakr()
	sticky=true
	ball.spr=8
	ball.x=59
	ball.y=105
	ball.r=4
	ball.dx=1
	ball.dy=-1

	--bullet var
	buls={}
	bultimer=0
	ammo=6
	rlodt=false
	reloaded=false
	rlodtimer=0
	
	--enemy var
	enemies={}
	ebuls={}
	spawn=false
	atkfrq=60
	
	--explosns
	parts={}
	sprx={}
	shkwav={}
	exlcol={}
	
	--bricks
	brix={}
	
	--background
	scrol1=60
	scrol2=-235
	
	--stars
	slowstars={}
	for i=1,20 do
		local sstar={}
		sstar.x=rnd(128)
		sstar.y=rnd(128)
		sstar.spd=rnd(1.5)
		add(slowstars,sstar)
	end
	faststars={}
	for i=1,10 do
		local fstar={}
		fstar.x=rnd(128)
		fstar.y=rnd(128)
		fstar.spd=rnd(2)+1
		add(faststars,fstar)
	end
end

function update_game()
	--player controls
	ship_ctrl()
	stickyball()
	shooting()

	--enemy fxns
	move_en()
	atkmode()
	en_shooting()
	
	--brix
	brix_master()

	--collision master
	lotsa_cols()

	--overall game timer
	t+=1
	
	--extra lives
	lifedrops()

	--if no enemy,
	--spawn next wave
	if mode=="game" and #enemies==0 then
		nextwave()
		spawn=false
		--delete leftover brix
		for mybrix in all(brix) do
			del(brix,mybrix)
		end
	end
	
	--lose game if no lives
	if lives < 0 then
			gameover()
	end
		
	--track if x is pressd
	if btn(5)==false then
 	x_up=true
 	elseif btn(5)==true then
 	x_up=false
 end
 
 	if respawning==true then
 		if ship.y>95 then
 			ship.y-=0.3
 		else
 			respawning=false
 		end
	end
	if respawning==false then
 		invul=false
	end
end

function update_wavstrt()
	update_game()
	
	wavt-=1
	if spawn==false then
		spawn_wave()
		spawn_brix()
		spawn=true
	end
	
	if wavt<=0 then
		mode="game"
		canshot=true
		if lifelost==false
		and wave>1
		and wave<16 then
		 points+=500
		 tot_points+=500
		else
			lifelost=false
		end
	end
end

function nextwave()
	wave+=1
	
	canshot=false
	if wave>16 then
	 mode="gamewin"
	else
		mode="wavstrt"
		wavt=90
	end
end

function gameover()
	mode="gameover"
end

function update_gameover()
	if btn(2) and btn(5) then
		respawn()
		lives=3
		points=0
		retries+=1
		scrol1=60
		mode="game"
	end

	if btn(3) and btn(4) then
		mode="start"
 		music(0)
	end
end

function update_gamewin()
	if btn(3) and btn(4) then
 		mode="start"
 		music(0)
	end
end

--draw loop
function draw_start()
	cls()

	--draw background lines
	draw_lines()
	
	--game title
	map(24,0,8,9,14,2)
	print("scramble,",37,12,8)
	print("scramble!!",72,16,8)
	
	--credits
	print("game by yoko8 / @fox_in_mask",0,116,7)
	print("music by gruber / @gruber_music",0,122,7)

	--animate ball on intro screen
	for introball in all(animball) do
		if anim1 then
			introball.spr=215
			introball.x-=1
			introball.y-=1
			bullanim=false
			if introball.y<=25 then
				anim1=false
				anim2=true
			end
		end
		if anim2 then
			introball.spr=219
			introball.x-=1
			introball.y+=1
			if introball.x<=0 then
				anim2=false
				anim3=true
			end
		end
		if anim3 then
			introball.spr=217
			introball.x+=1
			introball.y+=1
			if introball.x>=36 then
				anim3=false
				anim4=true
			end
		end
		if anim4 then
			introball.spr=213
			introball.x+=1
			introball.y-=1
			if introball.y<=25 then
				anim4=false
				anim5=true
			end
		end
		if anim5 then
			introball.spr=217
			introball.x+=1
			introball.y+=1
			if introball.x>=117 then
				anim5=false
				anim6=true
			end
		end
		if anim6 then
			introball.spr=219
			introball.x-=1
			introball.y+=1
			if introball.x<=96 then
				bullanim=true
			end
			if introball.x<=81 then
				anim6=false
				anim1=true
			end
		end
		drwmyspr(introball)
	end

	--animate buls on intro screen
	for introbuls in all(animbuls) do
		if bullanim and anim6 then
			introbuls.x-=1
			introbuls.y-=1
			drwmyspr(introbuls)
		else
			introbuls.x=106
			introbuls.y=94
		end
	end
	
	--animate sprx on intro screen
	for introbuls in all(animbuls) do
		for introball in all(animball) do
			if col(introbuls,introball) then
				for i=1,rnd(3)+5 do
				local introsprx={}
				introsprx.x=83
				introsprx.y=76
				introsprx.dx=(rnd()-0.6)*4
				introsprx.dy=(rnd()-0.6)*4
				introsprx.age=rnd(3)
				introsprx.size=rnd(1)+1
				introsprx.maxage=15+rnd(15)
				add(animsprx,introsprx)
				end				
			end
		end
	end
	for introsprx in all(animsprx) do
		local int_sprx_col=7
			if introsprx.age>5 then
				int_sprx_col=7
			end
			if introsprx.age>7 then
				int_sprx_col=11
			end
			if introsprx.age>10 then
				int_sprx_col=3
			end
			if introsprx.age>15 then
				int_sprx_col=13
			end
			if introsprx.age>20 then
				int_sprx_col=5
			end
		circfill(introsprx.x+4,
			introsprx.y+4,introsprx.size,
			int_sprx_col)
		introsprx.x+=introsprx.dx
		introsprx.y+=introsprx.dy
		introsprx.age+=rnd(2)
		if introsprx.age>introsprx.maxage then
			introsprx.size-=0.5
			if introsprx.size<0 then
				del(animsprx,introsprx)
			end
		end
	end

 	--animate ship on intro screen
	for introship in all(animship) do
		introship.aniframe+=introship.anispd
 	if flr(introship.aniframe)>#introship.ani then
  		introship.aniframe=1
 	end
 	introship.spr=introship.ani[flr(introship.aniframe)]
		drwmyspr(introship)
	end

--flashing start text
local start_col
	if sin(start_t/30)<-0.5 then
 		start_col=7
	elseif sin(start_t/30)<=0.5
 	and sin(start_t/30)>=-0.5 then
 		start_col=3
	elseif sin(start_t/30)>0.5 then
 		start_col=11
	end
	print("press x+⬆️ to start",27,106,start_col)
end

function draw_lines()
	--draw horiz lines
	for my_h_line in all(horiz_line) do
		line(0,my_h_line.y,128,my_h_line.y,1)
			my_h_line.y+=0.5
		if my_h_line.y>128 then
			del(horiz_line,my_h_line)
			gen_h_line()
		end
	end
	--draw vert lines
	for my_v_line in all(vert_line) do
		line(my_v_line.x,0,my_v_line.x,128,1)
		if mode=="start" then
			my_v_line.x+=0.5
		end
		if mode=="game" then
			if btn(0) then
				my_v_line.x+=0.5
			end
			if btn(1) then
				my_v_line.x-=0.5
			end
		end
		if my_v_line.x>128 then
			del(vert_line,my_v_line)
			gen_v_line_l()
		end
		if my_v_line.x<0 then
			del(vert_line,my_v_line)
			gen_v_line_r()
		end
	end
end

function draw_game()
	cls()
	
	draw_lines()
	
	--slow stars
	for i=1,#slowstars do
		local mysstar=slowstars[i]
		local mysstarcol=6
		if mysstar.spd<0.5 then
			mysstarcol=1
		elseif mysstar.spd>=0.5 and
		mysstar.spd<1 then
			mysstarcol=5
		end
		pset(mysstar.x,mysstar.y,mysstarcol)
		mysstar.y+=mysstar.spd
		if mysstar.y>=136 then
			del(slowstars,mysstar)
			gen_sstar()
		end
	end

	--background
	--rock belt
	map(8,0,0,scrol2,16,32)
	scrol2+=0.025
	if scrol2>130 then
		scrol2=-235
	end
	--enterblathnir
	if wave>=1 and scrol1<130 then
		map(0,0,32,scrol1,8,8)
		scrol1+=0.25
	end
		
	--drawing sprx
	for mysprx in all(sprx) do
		local sprx_col=7
		if mysprx.grn then
		--green sprx
			if mysprx.age>5 then
				sprx_col=7
			end
			if mysprx.age>7 then
				sprx_col=11
			end
			if mysprx.age>10 then
				sprx_col=3
			end
			if mysprx.age>15 then
				sprx_col=13
			end
			if mysprx.age>20 then
				sprx_col=5
			end
		else
		--enemy sprx
			if mysprx.age>5 then
				sprx_col=10
			end
			if mysprx.age>7 then
				sprx_col=9
			end
			if mysprx.age>10 then
				sprx_col=8
			end
			if mysprx.age>15 then
				sprx_col=2
			end
			if mysprx.age>20 then
				sprx_col=5
			end
		end
			circfill(mysprx.x+4,
			mysprx.y+4,mysprx.size,
			sprx_col)
			mysprx.x+=mysprx.dx
			mysprx.y+=mysprx.dy
			mysprx.age+=rnd(2)
		if mysprx.age>mysprx.maxage then
			mysprx.size-=0.5
			if mysprx.size<0 then
				del(sprx,mysprx)
			end
		end
	end

	--drawing shkwav
	for mysw in all(shkwav) do
		if mysw.r<mysw.maxr then
			mysw.r+=2
		end
		if mysw.r>=mysw.maxr then
			del(shkwav,mysw)
		end
		if mysw.wavw==4 then
			circ(mysw.x+15,mysw.y+9,
			mysw.r,13)
		elseif mysw.wavw==2 then
			circ(mysw.x+7,mysw.y+7,
			mysw.r,13)
		else
			circ(mysw.x+4,mysw.y+4,
			mysw.r,13)
		end
	end

	--drawing explosns
	for myp in all(parts) do
		local p_col=7
		if myp.blue then
		--ship explosn
			if myp.age>5 then
				p_col=6
			end
			if myp.age>7 then
				p_col=12
			end
			if myp.age>10 then
				p_col=4
			end
			if myp.age>15 then
				p_col=13
			end
			if myp.age>25 then
				p_col=1
			end
		else
		--enemy explosn
			if myp.age>5 then
				p_col=10
			end
			if myp.age>7 then
				p_col=9
			end
			if myp.age>10 then
				p_col=8
			end
			if myp.age>15 then
				p_col=2
			end
			if myp.age>25 then
				p_col=13
			end
		end
		circfill(myp.x+4,myp.y+4,
		myp.size,p_col)
		myp.x+=myp.dx
		myp.y+=myp.dy
		myp.dx=myp.dx*0.93
		myp.dy=myp.dy*0.93
		myp.age+=rnd(2)
		if myp.age>myp.maxage then
			myp.size-=0.5
			if myp.size<0 then
				del(parts,myp)
			end
		end
	end
	
	--draw brix
	for mybrix in all(brix) do
		if mybrix.flash>0 then
			mybrix.flash-=1
			for i=1,15 do
				pal(i,7)
			end
		end
		drwmyspr(mybrix)
		pal()
	end
	
	--draw enemies and
	--draw enemies flashing
	for myen in all(enemies) do
	--enemy flash on hit
		if myen.flash>0 then
			myen.flash-=1
			for i=1,15 do
				pal(i,7)
			end
		end
		--enemy flash before atk
		if myen.preatk>0 then
			myen.preatk-=1
			for i=1,15 do
				pal(i,8)
			end
		end
		drwmyspr(myen)
		pal()
	end
	
	--ball
	drwmyspr(ball)

	--draw bullet
	for mybul in all(buls) do
		drwmyspr(mybul)
	end

	--draw ship
	--ship+exhaust
	if not invul then
		drwmyspr(ship)
		drwmyspr(jet)
	else
	--invul state
		if sin(t/7)<0 then
			drwmyspr(ship)
			drwmyspr(jet)
		end
	end	
	
	--draw enemy bullet
	for myebul in all(ebuls) do
		drwmyspr(myebul)
	end


	--fast stars
	for i=1,#faststars do
		local myfstar=faststars[i]
		
		pset(myfstar.x,myfstar.y,7)
		myfstar.y+=myfstar.spd
		
		if myfstar.y>=136 then
			del(faststars,myfstar)
			gen_fstar()
		end
	end
		
	--extra lives
	for ex_life in all(one_ups) do
		drwmyspr(ex_life)
	end


	--draw ui at top
	rectfill(0,0,128,6,0)
	
	--print lives
 	print(" "..lives,82,1,7)
 	spr(194,77,0)
 
 	--ammo indicator
	for i=1,ammo do
		spr(15,94+(i*5),0.5)
	end

	--score counter
	print("score:"..points,1,1,7)
end

function draw_wavstrt()
	draw_game()
	if wave<16 then
		print("wave "..wave,51,72,8)
		--flashing text for bonus points
		if wave==1 then
		 rectfill(31,50,93,68,8)
			rectfill(33,52,91,66,0)
			print("x to shoot",43,54,7)
			print("z to throw egg",35,60,7)
		end
		if wave==14 then
			print("dedicated to my mom",27,63,7)
		end
		
		if wave>1 and lifelost==false then
			local bonus_col=8
			if sin(t/10)<0 then
				bonus_col=6
			else
				bonus_col=8
			end
			print("no damage bonus!",
			31,78,bonus_col)
		end
	end
end

function draw_gameover()
	rectfill(0,60,128,80,0)
	print("game over",46,62,7)
	print("press x+⬆️ to continue",20,68,6)
	print("press z+⬇️ to restart",22,74,6)
end


function draw_gamewin()
	rectfill(19,19,109,69,1)
	rectfill(21,21,107,67,0)
	print("you've defeated",23,24,7)
	print("the gear empire!",23,30,7)
	print("retries:"..retries,23,42,8)
	print("end score:"..points,23,48,8)
	print("total score:"..tot_points,23,54,8)
	print("press z+⬇️ to restart",23,60,11)
end


function drwmyspr(myspr)
	spr(myspr.spr,myspr.x,myspr.y,
	myspr.sprw,myspr.sprh)
end


--ship fxns
function ship_ctrl()
	local butnpresx=false
	local butnpresy=false

	if btn(0) then
		ship.spr=2
		--ship go l
		ship.dx=-1.5
		butnpresx=true
	end
	if btn(1) then
		ship.spr=3
		--ship go r
		ship.dx=1.5
		butnpresx=true
	end

	if not respawning then
		if btn(2) then
			--ship go up
			ship.dy=-1.5
			butnpresy=true
			jet.spd=0.5
		end
		if btn(3) then
			--ship go dwn
			ship.dy=1.5
			butnpresy=true
			jet.spd=0.2
		end
	end
	
	if not (butnpresx) then
		ship.spr=1
		ship.dx=0
	end
	if not (butnpresy) then
		jet.spd=0.3
		ship.dy=0
	end
	
	--fix ship pos
	ship.x=mid(6,ship.x,116)
	ship.y=mid(24,ship.y,120)
	
	--move ship pos
	ship.x+=ship.dx
	ship.y+=ship.dy
	
	--exhaust anims
	jet.x=ship.x
	jet.y=ship.y+8
	jet.spr+=jet.spd
	if jet.spr>6.6 then
		jet.spr=4
	end
end

function respawn()
	if respawning==false
	and invul==false
	and mode=="game" then
		sfx(2)
		lives-=1
		explode(ship.x,ship.y,true)
		sticky=true
		invul=true
		ship.x=59
		ship.y=125
		ball.x=59
		ball.y=125
		respawning=true
		lifelost=true
	end
end


--ball fxns
function stickyball()
	--ball spr set
	if ball.dx>0 and ball.dy<0 then
		ball.spr=8
	end
	if ball.dx>0 and ball.dy>0 then
		ball.spr=10
	end
	if ball.dx<0 and ball.dy<0 then
		ball.spr=9
	end
	if ball.dx<0 and ball.dy>0 then
		ball.spr=11
	end

	--set ball x/y range
	ball.x=mid(4,ball.x,118)
	ball.y=mid(10,ball.y,140)


	if sticky then
		--centers ball above ship
		ball.x=ship.x
		ball.y=ship.y-9
		ball.dy=-1
		if ship.dx>0 then
			ball.dx=1
		end
		if ship.dx<0 then
			ball.dx=-1
		end
		
	end
	
	--shoots ball
	if btnp(4) and sticky
	and canshot 
	and not respawning then
		--ball released same dxn
		--as ship
		if ship.dx>0 then
			ball.dx=1
		end
		if ship.dx<0 then
			ball.dx=-1
		end
		sticky=false
	end
	
	--if not sticky, ball moves
	if not sticky
	and mode=="game" then
		ball.x+=ball.dx
		ball.y+=ball.dy
	end
	
	if mode=="wavstrt" then
		ball.x+=(ship.x-ball.x)/2
		ball.y+=(ship.y-9-ball.y)/2
		
		if abs(ship.x-ball.x)<0.5
		and abs(ship.y-9-ball.y)<0.5 then
			ball.x=ship.x
			ball.y=ship.y-9
			sticky=true
		end
		
	end
	
	--ball/wall check
	if ball.x > 118 or 
		ball.x < 4 then
		ball.dx=-ball.dx
		sfx(0)
	end
	if ball.y < 10 then 
		ball.dy=-ball.dy
		sfx(0)
	end
	if ball.y > 130 then
		respawn()
		sfx(2)
	end
end


--bullet fxns
function shooting()
	--shoot buls
	if btn(5)
	and canshot
	and not sticky
	and not respawning
	and ammo>0
	and bultimer<=0 then
		local newbul=sprmakr()
		newbul.spr=7
		newbul.x=ship.x+2
		newbul.y=ship.y
		newbul.colw=4
		newbul.colh=7
		add(buls,newbul)
		--decrease ammo per buls
		ammo-=1
		sfx(9)
		--how fast u can spam buls
		bultimer=10
	end
 
	bultimer-=1

	--reload buls
	local bulsecs=flr(t)%60
	if ammo<6 then
		--if hold x, bad reload speed
		if  bulsecs==0
		and ammo==0
		and not x_up then
			ammo+=1
		--if not hold x, rapid reload
		elseif x_up then
			rlodt=true
		end
	end
	--rapid reload script
	if rlodt==true then
		rlodtimer+=1
		if rlodtimer>75
		and ammo<6 then
			reloaded=true
		end
	end
	if reloaded==true then
		if x_up then
			ammo+=1
		end
		if ammo>=6 then
			sfx(7)
			rlodt=false
			rlodtimer=0
			reloaded=false
		end
	end
	--max ammo always 6
	if ammo>6 then
		ammo=6
	end
	
	for i=#buls,1,-1 do
		local mybul=buls[i]
		--moves buls up
		mybul.y-=2
		--delete offscreen buls		
		if mybul.y<0 then
			del(buls,mybul)
		end
	end
end

--enemy buls
function en_shooting()
	for myebul in all(ebuls) do
		--make ebul flicker
		myebul.aniframe+=myebul.anispd
 		if flr(myebul.aniframe)>#myebul.ani then
  			myebul.aniframe=1
 		end

		myebul.spr=myebul.ani[flr(myebul.aniframe)]

		--move ebul
		myebul.x+=myebul.dx
		myebul.y+=myebul.dy
	
		--del offscrn ebuls
		if myebul.y>136
		or myebul.y<-8
		or myebul.x<-8
		or myebul.x>136 then
			del(ebuls,myebul)
		end
	end
end

--enemy+waves data
function spawn_wave()
	--higher atkfrq->less atks
	if wave==1 then
		music(7)
		atkfrq=150
		place_wave({
			{1,1,0,0,1,1,0,0,1,1},
			{1,1,0,0,1,1,0,0,1,1},
			{1,1,0,0,1,1,0,0,1,1},
			{1,1,0,0,1,1,0,0,1,1}
		})
	elseif wave==2 then
		atkfrq=120
		place_wave({
			{1,1,2,2,2,2,2,2,1,1},
			{1,1,2,2,2,2,2,2,1,1},
			{1,1,2,2,2,2,2,2,1,1},
			{1,1,0,0,0,0,0,0,1,1}
	})
	elseif wave==3 then
		atkfrq=120
		place_wave({
			{1,0,0,2,2,2,2,0,0,1},
			{1,0,0,2,2,2,2,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1}
	})
	elseif wave==4 then
		atkfrq=30
		place_wave({
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,3,0,0,0,0,3,0,0},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==5 then
		atkfrq=90
		place_wave({
			{2,3,2,2,3,2,2,3,2,2},
			{0,0,0,2,3,2,2,3,2,2},
			{0,0,0,0,0,2,2,3,2,2},
			{0,0,0,0,0,0,0,0,2,2}
	})
	elseif wave==6 then
		music(32)
		atkfrq=90
		place_wave({
			{3,0,0,0,2,2,0,0,0,3},
			{3,6,0,0,2,2,0,6,0,3},
			{1,0,0,0,2,2,0,0,0,1},
			{1,1,1,1,2,2,1,1,1,1}
	})
	elseif wave==7 then
		atkfrq=90
		place_wave({
			{3,3,3,3,3,3,3,3,3,3},
			{0,2,2,2,2,2,2,2,2,0},
			{0,0,2,2,2,2,2,2,0,0},
			{0,0,0,4,4,4,4,0,0,0}
	})
	elseif wave==8 then
		atkfrq=90
		place_wave({
			{4,2,0,0,5,0,0,0,2,4},
			{4,1,0,0,0,0,0,0,1,4},
			{4,1,0,0,3,3,0,0,1,4},
			{4,0,0,0,2,2,0,0,0,4}
	})
	elseif wave==9 then
		atkfrq=60
		place_wave({
			{3,2,0,0,0,0,0,0,2,3},
			{3,0,0,0,5,0,0,0,0,3},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==10 then
		atkfrq=90
		place_wave({
			{0,0,0,3,6,0,3,0,0,0},
			{0,0,0,3,0,0,3,0,0,0},
			{4,0,0,0,0,0,0,0,0,4},
			{4,4,0,0,0,0,0,0,4,4}
	})
	elseif wave==11 then
		music(25)
		atkfrq=90
		place_wave({
			{4,5,0,2,2,2,2,5,0,4},
			{4,0,0,2,2,2,2,0,0,4},
			{4,0,0,0,0,0,0,0,0,4},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==12 then
		atkfrq=60
		place_wave({
			{0,0,0,0,0,3,5,0,6,0},
			{0,0,0,0,0,3,0,0,0,0},
			{0,0,0,0,0,3,3,3,3,3},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==13 then
		atkfrq=60
		place_wave({
			{3,3,0,0,3,3,0,0,3,3},
			{4,4,0,0,6,0,0,0,4,4},
			{5,0,0,0,0,0,0,0,5,0},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==14 then
		music(0)
		atkfrq=60
		place_wave({
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,6,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
	})
	elseif wave==15 then
		music(15)
		atkfrq=60
		place_wave({
			{0,0,0,7,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	end
	if wave<16 then
		sfx(10)
	end
	if wave==16 then
		music(-1)
		sfx(14)
	end
end

function place_wave(lv)
	for y=1,4 do
		local myline=lv[y]
		for x=1,10 do
			if myline[x]!=0 then
				spawn_en(myline[x],
				x*10+6,y*9,x*6)
			end
		end
	end
end


function spawn_en(entype,
enx,eny,enwait)
	local myen=sprmakr()
	myen.type=entype
	myen.x=enx*2-64
	myen.y=eny-60
	myen.timr=0
	myen.anispd=0.1
	myen.wait=enwait
	
	--final x/y pos for enemies
	myen.finlx=enx
	myen.finly=eny
	
	myen.status="summon"
	
	if entype==nil or entype==1 then
		--grn gadget
		myen.spr=16
		myen.ani={16,17}
		myen.hp=2
	elseif entype==2 then
		--ylw gadget
		myen.spr=18
		myen.ani={18,19}
		myen.hp=1
	elseif entype==3 then
		--red gadget
		myen.spr=20
		myen.ani={20,21}
		myen.hp=5
	elseif entype==4 then
		--"sleeper" gadget
		myen.spr=22
		myen.ani={22,23}
		myen.hp=8
	elseif entype==5 then
		--powerhold!
		--the moving!! battery!!
		myen.spr=32
		myen.ani={32,34,36,38}
		myen.hp=20
		myen.sprw=2
		myen.sprh=2
		myen.colw=16
		myen.colh=16
	elseif entype==6 then
		--metahlhold!
		--the moving!! blockade?!
		myen.spr=40
		myen.ani={40,42,44,46}
		myen.hp=25
		myen.sprw=2
		myen.sprh=2
		myen.colw=16
		myen.colh=16
	elseif entype==7 then
		--gadjiltron!!!
		myen.spr=128
		myen.anispd=0.05
		myen.ani={128,132,136,140}
		myen.hp=80
		myen.sprw=4
		myen.sprh=4
		myen.colw=32
		myen.colh=32
	end
	add(enemies,myen)
end


--enemy core fxns
function move_en()
	for myen in all(enemies) do
		--enemy modes
		status_en(myen)
		
		--change sprite
		myen.aniframe+=myen.anispd
 		if flr(myen.aniframe)>#myen.ani then
 			myen.aniframe=1
		end
 		myen.spr=myen.ani[flr(myen.aniframe)]

		--del offscrn en
		if myen.status!="summon" then
			if myen.y>128
			or myen.x<-8
			or myen.x>136 then
				del(enemies,myen)
			end
		end
	end
end

function status_en(myen)
	--halt enemy ai
	if myen.wait>0 then
		myen.wait-=1
		if t%7==0 then
			myen.preatk=3
		end
		return
	end
	
	if myen.status=="summon" then
		--enemy eases in to scrn
		myen.x+=(myen.finlx-myen.x)/6		
		myen.y+=(myen.finly-myen.y)/6
		--if enemy close enuf to
		--finl pos, switch mode
		if myen.y>=myen.finly-1 then
			myen.status="def"
		end
	elseif myen.status=="def" then
		--enemy sways l/r
		local l_drift=true
		if sin(t/100)>0 then
			l_drift=true
		else
			l_drift=false
		end
		if l_drift then
			myen.x+=0.03
		else
			myen.x-=0.03
		end
		move(myen)

	elseif myen.status=="atk" then	
	--grn gadget
		if myen.type==1 then
			--rush recklessly (slow)
			myen.dy=0.5
			myen.dx=sin(t/50)
			if myen.x<24 then
				myen.dx+=0.5
			end
			if myen.x>104 then
				myen.dx-=0.5
			end

	--ylw gadget
		elseif myen.type==2 then
			--throw ebul
			en_shot(myen,0,1)
			--then return to def
			myen.status="def"

	--red gadget		  
		elseif myen.type==3 then
			--throw homing ebul
			aimfire(myen,1)
			--then return to def
			myen.status="def"
	
	--sleeper gadget
		elseif myen.type==4 then
			if myen.hp>=3 then
				--throw fast homing ebul
				aimfire(myen,1)
				--then return to def
				myen.status="def"
			else
				if myen.dx==0 then
					myen.dy=0.5
					if ship.y<=myen.y then
						myen.dy=0
						if ship.x<myen.x then
							myen.dx=-0.5
						else
							myen.dx=0.5
						end
					end
				end
			end

	--powerhold
		elseif myen.type==5 then
			en_spred(myen,rnd(1),1)
			myen.status="def"

	--metalhold
		elseif myen.type==6 then
			aimfire(myen,0.9)
			aimfire(myen,1)
			aimfire(myen,1.1)
			myen.status="def"

	--gadjiltron
		elseif myen.type==7 then
			if myen.hp>=40 then
				if #brix<=5 then
					for mybrix in all(brix) do
						del(brix,mybrix)
					end
					laybrix({
						{0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0},
						{1,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1},
						{0,1,1,1,1,1,1,1,1,0},
						{0,0,0,0,0,0,0,0,0,0}
					})
				end
				if #enemies==1 then
					place_wave({
						{1,0,0,0,0,0,0,0,0,1},
						{1,1,0,0,0,0,0,0,1,1},
						{0,1,1,0,0,0,0,1,1,0},
						{0,0,1,0,0,0,0,1,0,0}
					})
				else
					aimfire(myen,0.75)
					aimfire(myen,1)
					aimfire(myen,1.25)
				end
			elseif myen.hp<40 then
				if #brix<=8 then
					for mybrix in all(brix) do
						del(brix,mybrix)
					end
					laybrix({
						{3,0,0,0,0,0,0,0,0,3},
						{3,0,0,0,0,0,0,0,0,3},
						{3,0,0,0,0,0,0,0,0,3},
						{3,0,0,0,0,0,0,0,0,3},
						{3,0,0,0,0,0,0,0,0,3},
						{0,3,3,3,3,3,3,3,3,0},
						{0,0,3,3,3,3,3,3,0,0},
						{0,0,0,0,0,0,0,0,0,0}
					})
				end
				if #enemies==1 then
					place_wave({
						{0,0,3,0,0,0,0,3,0,0},
						{0,0,3,0,0,0,0,3,0,0},
						{0,0,3,0,0,0,0,3,0,0},
						{0,0,0,0,0,0,0,0,0,0}
					})
				else
					en_spred(myen,rnd(1),1)
					en_spred(myen,rnd(1),0.5)
				end
						
			end
			myen.status="def"
		end
	move(myen)
	end
end

--enemy behavior
function atkmode()
	if mode !="game" then
		return
	end

	local secs=flr(t)%atkfrq

	if	secs==0 and #enemies>0 then
		
		--min will always give
		--whichever num is smaller
		local maxen=min(12,#enemies)
		--gives us number of one
		--of 12 final ens in array
		local myindex=flr(rnd(maxen))
		myindex=#enemies-myindex
		--rndly picks from array
		--to switch 1 en to atk
		local myen=enemies[myindex]
		if myen.status=="def" then
			myen.status="atk"
			myen.wait=60
		else
			return
		end
	end
	
end

function move(obj)
	obj.x+=obj.dx
	obj.y+=obj.dy
end

--bricks
function spawn_brix()
	if wave==1 then
		laybrix({
			{1,0,0,1,0,0,1,0,0,1},
			{1,0,0,1,0,0,1,0,0,1},
			{2,0,0,2,0,0,2,0,0,2},
			{2,0,0,2,0,0,2,0,0,2},
			{3,0,0,3,0,0,3,0,0,3},
			{3,0,0,3,0,0,3,0,0,3},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==2 then
		laybrix({
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,1,1,0,0,0,0,1,1,1},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==3 then
		laybrix({
			{1,0,3,0,0,0,0,3,0,1},
			{1,0,3,0,0,0,0,3,0,1},
			{1,0,3,0,0,0,0,3,0,1},
			{1,0,3,3,2,2,3,3,0,1},
			{0,0,2,2,3,3,2,2,0,0},
			{0,0,2,0,0,0,0,2,0,0},
			{0,0,2,0,0,0,0,2,0,0},
			{0,0,2,0,0,0,0,2,0,0}
		})
	elseif wave==4 then
		laybrix({
			{0,3,0,0,0,0,0,0,3,0},
			{0,0,1,1,1,1,1,1,0,0},
			{0,1,0,0,1,1,0,0,1,0},
			{0,1,0,0,1,1,0,0,1,0},
			{1,1,1,1,1,1,1,1,1,1},
			{1,0,1,0,0,0,0,1,0,1},
			{1,0,1,0,0,0,0,1,0,1},
			{0,0,0,1,0,0,1,0,0,0}
		})
	elseif wave==5 then
		laybrix({
			{0,0,0,0,0,0,0,0,0,0},
			{3,0,0,0,0,0,0,0,0,0},
			{2,3,3,0,0,0,0,0,0,0},
			{2,2,3,3,1,0,0,0,0,0},
			{1,2,2,3,3,1,1,0,0,0},
			{1,1,2,2,3,3,1,2,2,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==6 then
		laybrix({
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{2,2,0,0,3,3,0,0,2,2},
			{2,2,0,0,3,3,0,0,2,2},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==7 then
		laybrix({
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,2,0,0,0,0,0,0,2,1},
			{1,2,0,0,0,0,0,0,2,1},
			{1,2,3,0,0,0,0,3,2,1},
			{1,2,3,0,0,0,0,3,2,1},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==8 then
		laybrix({
			{0,0,0,3,0,0,3,0,0,0},
			{0,0,0,3,0,0,3,0,0,0},
			{0,0,0,3,0,0,3,0,0,0},
			{0,0,0,3,0,0,3,0,0,0},
			{0,0,1,3,0,0,3,1,0,0},
			{0,1,1,3,1,1,3,1,1,0},
			{1,1,1,0,0,0,0,1,1,1},
			{1,1,0,0,0,0,0,0,1,1}
		})
	elseif wave==9 then
		laybrix({
			{0,0,0,0,2,2,0,0,0,0},
			{0,0,0,2,0,0,2,0,0,0},
			{0,0,2,0,0,0,0,2,0,0},
			{1,1,2,0,0,0,0,2,1,1},
			{1,1,2,0,3,3,0,2,1,1},
			{1,1,2,0,3,3,0,2,1,1},
			{0,0,2,0,0,0,0,2,0,0},
			{0,0,0,2,0,0,2,0,0,0}
		})
	elseif wave==10 then
		laybrix({
			{3,3,1,0,0,0,0,1,3,3},
			{0,3,1,0,0,0,0,1,3,0},
			{0,0,1,0,0,0,0,1,0,0},
			{0,0,0,3,3,3,3,0,0,0},
			{2,0,0,0,3,3,0,0,0,2},
			{0,2,0,0,0,0,0,0,2,0},
			{0,0,2,2,2,2,2,2,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==11 then
		laybrix({
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1},
			{1,0,1,1,1,1,1,1,0,1},
			{1,1,1,3,3,3,3,1,1,1},
			{1,1,3,0,0,0,0,3,1,1},
			{1,3,0,0,0,0,0,0,3,1},
			{3,0,0,0,0,0,0,0,0,3}
		})
	elseif wave==12 then
		laybrix({
			{3,0,0,3,1,0,0,0,0,1},
			{0,3,3,0,1,0,0,0,0,1},
			{0,3,3,0,1,0,0,0,0,1},
			{3,0,0,3,1,0,0,0,0,1},
			{0,0,0,0,1,1,1,1,1,1},
			{2,2,2,2,2,2,2,2,2,2},
			{2,2,2,2,2,2,2,2,2,2},
			{0,2,0,2,0,2,0,2,0,2}
		})
	elseif wave==13 then
		laybrix({
			{2,0,0,2,0,0,2,0,0,2},
			{2,0,0,2,0,0,2,0,0,2},
			{2,0,0,2,0,0,2,0,0,2},
			{2,0,0,2,0,0,2,0,0,2},
			{2,0,0,2,1,1,2,0,0,2},
			{2,1,1,2,1,1,2,1,1,2},
			{2,1,1,2,1,1,2,1,1,2},
			{0,0,0,0,0,0,0,0,0,0}
		})
	elseif wave==14 then
		laybrix({
			{0,0,3,3,0,0,3,3,0,0},
			{0,3,3,3,3,3,3,3,3,0},
			{0,3,3,3,0,0,3,3,3,0},
			{0,3,3,3,0,0,3,3,3,0},
			{0,0,3,3,0,0,3,3,0,0},
			{0,0,0,3,3,3,3,0,0,0},
			{0,0,0,0,3,3,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		})
	end
end

function laybrix(br)
	for y=1,8 do
		local mybrx=br[y]
		for x=1,10 do
			if mybrx[x]!=0 then
				make_brix(mybrx[x],
				x*13-14,y*7+2)
			end
		end
	end
end


function make_brix(brixtype,
brixx,brixy)
	local mybrix=sprmakr()
	mybrix.type=brixtype
	mybrix.x=brixx*2-64
	mybrix.y=brixy-60
	mybrix.finlx=brixx
	mybrix.finly=brixy
	mybrix.sprw=2
	mybrix.colw=13
	mybrix.colh=7
	mybrix.hp=2
	mybrix.status="build"
	if brixtype==nil or brixtype==1 then
		mybrix.spr=24
	elseif brixtype==2 then
		mybrix.spr=26
	elseif brixtype==3 then
		mybrix.spr=28
	end
	add(brix,mybrix)
end

function brix_master()
	for mybrix in all(brix) do
		if mybrix.status=="build" then
		mybrix.x+=(mybrix.finlx-mybrix.x)/6		
		mybrix.y+=(mybrix.finly-mybrix.y)/6
		end
		if abs(mybrix.finlx-mybrix.x)<0.5 then
			mybrix.x=mybrix.finlx
		end
		if abs(mybrix.finly-mybrix.y)<0.5 then
			mybrix.y=mybrix.finly
		end
	end
end


--misc
function sprmakr()
	local myspr={}
	myspr.x=0
	myspr.y=0
	myspr.dx=0
	myspr.dy=0
	myspr.aniframe=1
	myspr.flash=0
	myspr.preatk=0
	myspr.spr=0
	myspr.sprw=1
	myspr.sprh=1
	myspr.colw=8
	myspr.colh=8
	myspr.timr=0
	return myspr
end

function lifedrops()
	--life up every 2 minutes
	local dropt=flr(t)%7200
	if dropt==0 then
		local ex_life=sprmakr()
		ex_life.spr=193
		ex_life.anispd=0.5
		ex_life.ani={193,194,195}
		ex_life.x=rnd(120)+4
		ex_life.y=1
		ex_life.colw=8
		ex_life.colh=5
		add(one_ups,ex_life)
	end
	for ex_life in all(one_ups) do
		ex_life.aniframe+=ex_life.anispd
  if flr(ex_life.aniframe)>#ex_life.ani then
   ex_life.aniframe=1
  end
  ex_life.spr=ex_life.ani[flr(ex_life.aniframe)]
	
		ex_life.y+=0.25
		if ex_life.y>130 then
			del(one_ups,ex_life)
		end
	end
end

function en_shot(myen,ang,spd)
	local new_ebul=sprmakr()
	new_ebul.spr=12
	new_ebul.anispd=0.3
	new_ebul.ani={12,13,14}
	new_ebul.colw=4
	new_ebul.colh=4
	if myen.type==5
	or myen.type==6 then
		new_ebul.x=myen.x+6
		new_ebul.y=myen.y+2
	elseif myen.type==7 then
		new_ebul.x=myen.x+15
		new_ebul.y=myen.y+8
	else
		new_ebul.x=myen.x+2
		new_ebul.y=myen.y
	end

	new_ebul.dx=sin(ang)*spd
	new_ebul.dy=cos(ang)*spd
	add(ebuls,new_ebul)
	sfx(1)
end

function en_spred(myen,mod,spd)
	for i=1,8 do
		en_shot(myen,i/8+mod,spd)
	end
end

function aimfire(myen,spd)
	ang=atan2(ship.y-myen.y,
		ship.x-myen.x)
	en_shot(myen,ang,spd)
end

function gen_h_line()
	local my_h_line={}
	my_h_line.y=0
	add(horiz_line,my_h_line)
end

function gen_v_line_l()
	local my_v_line={}
	my_v_line.x=0
	add(vert_line,my_v_line)
end

function gen_v_line_r()
	local my_v_line={}
	my_v_line.x=128
	add(vert_line,my_v_line)
end

function gen_sstar()
	local sstar={}
	sstar.x=rnd(128)
	sstar.y=-8
	sstar.spd=rnd(1.5)
	add(slowstars,sstar)
end

function gen_fstar()
	local fstar={}
	fstar.x=rnd(128)
	fstar.y=-8
	fstar.spd=rnd(2)+1
	add(faststars,fstar)
end

function col(a,b)
	--"a" boundaries
	local a_left=a.x
	local a_top=a.y
	local a_right=a.x+a.colw-1
	local a_bot=a.y+a.colh-1
	--"b" boundaries
	local b_left=b.x
	local b_top=b.y
	local b_right=b.x+b.colw-1
	local b_bot=b.y+b.colh-1
	--col dtxn
	if a_top>b_bot then
		return false
	end
	if b_top>a_bot then
		return false
	end
	if a_left>b_right then
		return false
	end
	if b_left>a_right then
		return false
	end
	return true
end

function lotsa_cols()
	--player cols
	--col dtxn ship x ball
	if col(ship,ball) then
		if ball.dy>0 then
			ball.dy=-1
			sfx(44)
		end
	end
	if not invul then
	--col dtxn ship x enemies
		for myen in all(enemies) do
			if col(myen,ship) then
				respawn()
			end
		end
	--col dtxn ship x ebuls
		for myebul in all(ebuls) do
			if col(myebul,ship) then
				respawn()
			end
		end
	--col dtxn ship x brix
		for mybrix in all(brix) do
			if col(mybrix,ship) then
				respawn()
			end
		end
	end
	--col dtxn ship x 1up
	for ex_life in all(one_ups) do
		if col(ex_life,ship) then
			del(one_ups,ex_life)
			lives+=1
			sfx(13)
		end
	end

	--enemy cols
	for myen in all(enemies) do
		if myen.timr>=0 then
			myen.timr-=1
		end
	--col dtxn enemies x ball
		if col(myen,ball)
		and canshot
		and not sticky then
			--enemy flash on hit
			myen.flash=3
			--prevent enemies from
			--being hit every frame
			--by the ball
			if myen.timr<=0 then
				myen.hp-=3
				myen.timr=5
				sfx(6)
			end
			if myen.hp>0 then
				--shockwave only if
				--enemy survives
				shockwav(myen.x,myen.y,
				myen.sprw,myen.sprh)

				if deflect_ball(
				ball.x,ball.y,ball.dx,ball.dy,
				myen.x,myen.y,myen.dx,myen.dy
				) then
					ball.dx=-ball.dx
				else
					ball.dy=-ball.dy
				end
			elseif myen.hp<=0 then
				if myen.type==5
				or myen.type==6 then
					explode(myen.x+4,myen.y+4,false)
					points+=100
					tot_points+=100
				elseif myen.type==7 then
					explode(myen.x+12,myen.y+12,false)
					points+=1000
					tot_points+=1000
				elseif myen.type==4 then
					explode(myen.x,myen.y,false)
					points+=50
					tot_points+=50
				else
					explode(myen.x,myen.y,false)
					points+=10
					tot_points+=10
				end
				del(enemies,myen)
				sfx(5)
			end
		end
	--col dtxn enemies x buls
		for mybul in all(buls) do
			if col(myen,mybul) then
				--only dmg if wave
				--is set up
				if canshot then
					shrapnel(myen.x,myen.y,false)
					myen.hp-=1
					myen.flash=3
					sfx(4)
				end
				--enemy die if hp<=0
				if myen.hp<=0 then
					if myen.type==5
					or myen.type==6 then
						explode(myen.x+4,myen.y+4,false)
						points+=100
						tot_points+=100
					elseif myen.type==7 then
						explode(myen.x+12,myen.y+12,false)
						points+=1000
						tot_points+=1000
					elseif myen.type==4 then
						explode(myen.x,myen.y,false)
						points+=50
						tot_points+=50
					else
						explode(myen.x,myen.y,false)
						points+=10
						tot_points+=10
					end
					del(enemies,myen)
					sfx(5)
				end
				del(buls,mybul)
			end
		end
	end

	--col dtxn buls x ball
	for mybul in all(buls) do
		if col(mybul,ball)
		and not sticky then
			shrapnel(ball.x,ball.y,true)
			ball.dy=-1
			del(buls,mybul)
			sfx(3)
		end
	end
	
	--brix cols
	for mybrix in all(brix) do
	--col dtxn buls x brix
		for mybul in all(buls) do
			if col(mybul,mybrix) then
				if canshot then
					mybrix.hp-=1
					mybrix.flash=3
				end
				if mybrix.hp<=0 then
					points+=10
					tot_points+=10
					del(brix,mybrix)
				end
				sfx(12)
				shrapnel(mybrix.x,mybrix.y,false)
				del(buls,mybul)
			end
		end

	--col dtxn ball x brix
	if col(ball,mybrix)
		and mode=="game"
		and not sticky then
			if deflect_ball(
			ball.x,ball.y,ball.dx,ball.dy,
			mybrix.x,mybrix.y,mybrix.dx,mybrix.dy
			) then
				ball.dx=-ball.dx
			else
				ball.dy=-ball.dy
			end
			sfx(11)
			points+=10
			tot_points+=10
			shrapnel(mybrix.x,mybrix.y,false)
			del(brix,mybrix)
		end
	end
end

function deflect_ball(bx,by,bdx,bdy,tx,ty,tw,th)
-- calculate wether to deflect the ball
-- horizontally or vertically when it hits a box
 	if bdx == 0 then
  	-- moving vertically
		return false
	elseif bdy == 0 then
	-- moving horizontally
  		return true
	else
 		-- moving diagonally
		-- calculate slope
		local slp = bdy / bdx
 		local cx, cy
		-- check variants
  		if slp > 0 and bdx > 0 then
 			-- moving down right
 			debug1="q1"
			cx = tx-bx
			cy = ty-by
 			if cx<=0 then
				return false
			elseif cy/cx < slp then
				return true
			else
				return false
			end
		elseif slp < 0 and bdx > 0 then
			debug1="q2"
			-- moving up right
			cx = tx-bx
			cy = ty+th-by
			if cx<=0 then
				return false
			elseif cy/cx < slp then
				return false
			else
				return true
			end
		elseif slp > 0 and bdx < 0 then
			debug1="q3"
			-- moving left up
			cx = tx+tw-bx
			cy = ty+th-by
			if cx>=0 then
				return false
			elseif cy/cx > slp then
				return false
			else
				return true
			end
		else
			-- moving left down
			debug1="q4"
			cx = tx+tw-bx
			cy = ty-by
			if cx>=0 then
				return false
			elseif cy/cx < slp then
				return false
			else
				return true
			end
		end
	end
	return false
end

function explode(expx,expy,isblue)
	for i=1,30 do
		local myp={}
		myp.x=expx
		myp.y=expy
		myp.blue=isblue
		myp.dx=(rnd()-0.5)*2
		myp.dy=(rnd()-0.5)*2
		myp.age=rnd(2)
		myp.size=1+rnd(3)
		myp.maxage=20+rnd(30)
		add(parts,myp)
	end
end

function shrapnel(bitx,bity,isgrn)
	for i=1,rnd(3)+2 do
		local mysprx={}
		mysprx.x=bitx
		mysprx.y=bity
		mysprx.grn=isgrn
		mysprx.dx=(rnd()-0.5)*2
		mysprx.dy=(rnd()-0.5)*2
		mysprx.age=rnd(2)
		mysprx.size=1
		mysprx.maxage=15+rnd(15)
		add(sprx,mysprx)
	end
end

function shockwav(wavx,wavy,wavw,wavh)
	local mysw={}
	mysw.x=wavx
	mysw.y=wavy
	mysw.wavw=wavw
	mysw.wavh=wavh
	if mysw.wavw==4 then
		mysw.r=5
		mysw.maxr=19
	elseif mysw.wavw==2 then
		mysw.r=4
		mysw.maxr=16
	else
		mysw.r=2
		mysw.maxr=10
	end
	add(shkwav,mysw)
end